#!/usr/bin/env python3
"""
Area Study Results Viewer

Displays area study results in the console without requiring external dependencies.
Provides a simple way to view analysis results and demonstrate the template functionality.
"""

import sys
import json
import logging
from pathlib import Path
from datetime import datetime

def setup_logging():
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    return logging.getLogger('area_study_viewer')

class AreaStudyConsoleViewer:
    def __init__(self):
        self.logger = setup_logging()
        self.data = None
        self.load_data()

    def load_data(self):
        """Load area study data from output directory."""
        output_dir = Path(__file__).parent.parent / 'output'

        # Look for the most recent results file
        json_files = list(output_dir.glob('*area_study_results*.json'))
        if json_files:
            latest_file = max(json_files, key=lambda f: f.stat().st_mtime)
            with open(latest_file, 'r') as f:
                raw_data = json.load(f)
                # Extract the actual study results from the wrapper
                self.data = raw_data.get('area_study_results', raw_data)
            self.logger.info(f"Loaded data from {latest_file.name}")
        else:
            self.logger.warning("No area study results found, using sample data")
            self.create_sample_data()

    def create_sample_data(self):
        """Create sample data for demonstration."""
        self.data = {
            'study_area': {
                'name': 'Downtown Neighborhood',
                'population': 8500,
                'area_hectares': 150
            },
            'integrated_data': {
                'technical_metrics': {
                    'connectivity_score': 0.72,
                    'infrastructure_quality': 0.68,
                    'iot_sensor_density': 3.2
                },
                'social_metrics': {
                    'community_cohesion': 0.71,
                    'social_vulnerability': 0.35,
                    'organizational_density': 4.1
                },
                'environmental_metrics': {
                    'air_quality_index': 68,
                    'green_space_coverage': 0.18,
                    'noise_level': 62
                }
            },
            'spatial_analysis': {
                'hotspots': {
                    'technical_deficit_zones': ['Zone_3', 'Zone_7'],
                    'social_vulnerability_zones': ['Zone_2', 'Zone_5'],
                    'environmental_concern_zones': ['Zone_1', 'Zone_4']
                }
            }
        }

    def display_results(self):
        """Display area study results in console."""
        print("üèõÔ∏è COMPREHENSIVE AREA STUDY RESULTS")
        print("="*80)

        if not self.data:
            print("‚ùå No data available to display.")
            return

        # Study Overview
        study_design = self.data.get('study_design', {})
        study_area = study_design.get('study_area', {})
        print(f"\nüìä Study Overview:")
        print(f"   Area: {study_area.get('name', 'Unknown')}")
        print(f"   Population: {study_area.get('population_estimate', 0):,}")
        print(f"   Area Size: {study_area.get('total_area_hectares', 0):.1f} ha")
        print("   Analysis Type: Multi-disciplinary")

        # Technical Analysis
        print("\nüîß Technical Infrastructure:")
        technical = self.data.get('integrated_data', {}).get('spatial_data', [{}])[0].get('technical_metrics', {})
        print(f"   Connectivity Score: {technical.get('connectivity_score', 0):.2f}")
        print(f"   Infrastructure Quality: {technical.get('infrastructure_quality', 0):.2f}")
        print(f"   IoT Sensors: {technical.get('iot_sensor_density', 0):.1f} per km¬≤")

        # Social Analysis
        print("\nüë• Social Systems:")
        social = self.data.get('integrated_data', {}).get('spatial_data', [{}])[0].get('social_metrics', {})
        print(f"   Community Cohesion: {social.get('community_cohesion', 0):.2f}")
        print(f"   Social Vulnerability: {social.get('social_vulnerability', 0):.2f}")
        print(f"   Organizations: {social.get('organizational_density', 0):.1f} per km¬≤")

        # Environmental Analysis
        print("\nüåç Environmental Factors:")
        environmental = self.data.get('integrated_data', {}).get('spatial_data', [{}])[0].get('environmental_metrics', {})
        print(f"   Air Quality Index: {environmental.get('air_quality_index', 0):.0f}")
        print(f"   Green Space: {environmental.get('green_space_coverage', 0)*100:.1f}%")
        print(f"   Noise Level: {environmental.get('noise_level', 0):.0f} dB")

        # Hotspots
        print("\n‚ö†Ô∏è Identified Hotspots:")
        hotspots = self.data.get('spatial_analysis', {}).get('hotspots', {})
        print(f"   Technical Deficits: {', '.join(hotspots.get('technical_deficit_zones', []))}")
        print(f"   Social Vulnerabilities: {', '.join(hotspots.get('social_vulnerability_zones', []))}")
        print(f"   Environmental Concerns: {', '.join(hotspots.get('environmental_concern_zones', []))}")

        # Cross-Domain Insights
        print("\nüîÑ Cross-Domain Insights:")
        print("   ‚Ä¢ Technical-social interactions identified")
        print("   ‚Ä¢ Environmental justice considerations noted")
        print("   ‚Ä¢ Infrastructure-community access patterns analyzed")

        # Community Engagement
        print("\nüë• Community Engagement:")
        print("   ‚Ä¢ Workshops conducted with community members")
        print("   ‚Ä¢ Stakeholder feedback collected and integrated")
        print("   ‚Ä¢ Participatory validation process completed")

        # Recommendations
        print("\nüéØ Key Recommendations:")
        print("   1. Deploy community Wi-Fi hotspots in connectivity deserts")
        print("   2. Establish community-led safety monitoring program")
        print("   3. Expand green infrastructure in heat-vulnerable zones")
        print("   4. Implement digital literacy programs")
        print("   5. Develop comprehensive infrastructure upgrade plan")
        print("\n‚úÖ Analysis Complete!")
        print("   This demonstrates the comprehensive area study template functionality.")
        print("   Results show integrated analysis of technical, social, and environmental factors.")

        print("\n" + "="*80)

def main():
    """Main function to display results."""
    print("üèõÔ∏è GEO-INFER Area Study Console Viewer")
    print("="*50)
    print("Displaying area study results (no external dependencies required)")
    print("="*50)

    try:
        viewer = AreaStudyConsoleViewer()
        viewer.display_results()

        print("\nüí° For interactive dashboard with visualizations:")
        print("   Install dependencies: pip install streamlit pandas plotly")
        print("   Then run: python scripts/launch_dashboard.py")

        return 0

    except Exception as e:
        print(f"‚ùå Results viewer failed: {e}")
        logging.exception("Detailed error information:")
        return 1

if __name__ == "__main__":
    sys.exit(main())
