[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "geo-infer-framework"
version = "1.0.0"
description = "Comprehensive geospatial inference framework for ecological, civic, and commercial applications"
authors = [
    {name = "GEO-INFER Development Team", email = "geo-infer@activeinference.institute"}
]
readme = "README.md"
license = {text = "CC BY-ND-SA 4.0"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Creative Commons License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["geospatial", "active inference", "geoinformatics", "spatial analysis", "bayesian inference"]

# Core dependencies required by all modules
dependencies = [
    # Core scientific computing
    "numpy>=1.20.0",
    "pandas>=1.3.0",
    "scipy>=1.7.0",
    "scikit-learn>=1.0.0",
    
    # Geospatial libraries
    "geopandas>=0.10.0",
    "shapely>=1.8.0",
    "h3>=4.0.0",
    "pyproj>=3.3.0",
    "rasterio>=1.2.0",
    "xarray>=0.19.0",
    "dask>=2021.9.0",
    
    # Spatial indexing and analysis
    "rtree>=0.9.0",
    "fiona>=1.8.0",
    
    # Time series and temporal analysis
    "cftime>=1.5.0",
    "netCDF4>=1.5.7",
    
    # Data access and APIs
    "requests>=2.26.0",
    "urllib3>=1.26.0",
    "aiohttp>=3.8.0",
    
    # Configuration and serialization
    "pyyaml>=5.4.0",
    "toml>=0.10.0",
    "jsonschema>=3.2.0",
    
    # Visualization and plotting
    "matplotlib>=3.4.0",
    "seaborn>=0.11.0",
    "plotly>=5.3.0",
    "folium>=0.12.0",
    "branca>=0.4.0",
    
    # Utilities
    "click>=8.0.0",
    "tqdm>=4.62.0",
    "python-dateutil>=2.8.0",
    "pytz>=2021.1",
    "rich>=12.0.0",
]

# Optional dependencies for enhanced functionality
[project.optional-dependencies]
# AI and Machine Learning
ai = [
    "tensorflow>=2.6.0",
    "torch>=1.9.0",
    "xgboost>=1.4.0",
    "lightgbm>=3.2.0",
    "optuna>=2.10.0",
]

# Bayesian inference
bayesian = [
    "pymc>=4.0.0",
    "arviz>=0.11.0",
    "emcee>=3.1.0",
    "corner>=2.2.0",
]

# Simulation and modeling
simulation = [
    "mesa>=0.8.9",
    "networkx>=2.6.0",
    "simpy>=3.0.0",
]

# Bioinformatics
bio = [
    "biopython>=1.79",
    "scikit-bio>=0.5.6",
    "ete3>=3.1.0",
]

# Health applications
health = [
    "lifelines>=0.26.0",
    # migrate from pymc3 (theano-pymc) to pymc>=4 (aesara/aeppl stack)
    "pymc>=5.0.0",
]

# Climate and environmental
climate = [
    "cf-units>=3.0.0",
    "cdo>=1.5.0",
    "xclim>=0.40.0",
]

# Performance optimization
performance = [
    "numba>=0.54.0",
    "cupy>=9.4.0",
    "dask[complete]>=2021.9.0",
    "vaex>=4.13.0",
]

# Quality assurance and testing
quality = [
    "pytest>=6.2.0",
    "pytest-cov>=2.12.0",
    "pytest-asyncio>=0.20.0",
    "black>=21.9.0",
    "flake8>=3.9.0",
    "mypy>=0.910",
    "isort>=5.9.0",
]

# Documentation
docs = [
    "sphinx>=4.2.0",
    "sphinx-rtd-theme>=1.0.0",
    "nbsphinx>=0.8.0",
    "myst-parser>=0.15.0",
]

# Web and API development
web = [
    "fastapi>=0.68.0",
    "uvicorn>=0.15.0",
    "pydantic>=1.8.0",
    "starlette>=0.14.0",
    "jinja2>=3.0.0",
]

# IoT and real-time
iot = [
    "paho-mqtt>=1.6.0",
    "asyncio-mqtt>=0.11.0",
    "websockets>=10.0",
    "influxdb-client>=1.24.0",
]

# All optional dependencies (expanded; avoid self-referencing extras)
all = [
    # ai
    "tensorflow>=2.6.0",
    "torch>=1.9.0",
    "xgboost>=1.4.0",
    "lightgbm>=3.2.0",
    "optuna>=2.10.0",
    # bayesian
    "pymc>=4.0.0",
    "arviz>=0.11.0",
    "emcee>=3.1.0",
    "corner>=2.2.0",
    # simulation
    "mesa>=0.8.9",
    "networkx>=2.6.0",
    "simpy>=3.0.0",
    # bio
    "biopython>=1.79",
    "scikit-bio>=0.5.6",
    "ete3>=3.1.0",
    # health
    "lifelines>=0.26.0",
    "pymc>=5.0.0",
    # climate (excluding climtas)
    "cf-units>=3.0.0",
    "cdo>=1.5.0",
    "xclim>=0.40.0",
    # performance
    "numba>=0.54.0",
    "cupy>=9.4.0",
    "dask[complete]>=2021.9.0",
    "vaex>=4.13.0",
    # quality
    "pytest>=6.2.0",
    "pytest-cov>=2.12.0",
    "pytest-asyncio>=0.20.0",
    "black>=21.9.0",
    "flake8>=3.9.0",
    "mypy>=0.910",
    "isort>=5.9.0",
    # docs
    "sphinx>=4.2.0",
    "sphinx-rtd-theme>=1.0.0",
    "nbsphinx>=0.8.0",
    "myst-parser>=0.15.0",
    # web
    "fastapi>=0.68.0",
    "uvicorn>=0.15.0",
    "pydantic>=1.8.0",
    "starlette>=0.14.0",
    "jinja2>=3.0.0",
    # iot
    "paho-mqtt>=1.6.0",
    "asyncio-mqtt>=0.11.0",
    "websockets>=10.0",
    "influxdb-client>=1.24.0",
]

[project.urls]
Homepage = "https://github.com/geo-infer/geo-infer"
Documentation = "https://geo-infer.readthedocs.io/"
Repository = "https://github.com/geo-infer/geo-infer"
"Bug Tracker" = "https://github.com/geo-infer/geo-infer/issues"
Discord = "https://discord.activeinference.institute/"

[project.scripts]
geo-infer-setup = "geo_infer_framework.setup:main"
geo-infer-test = "geo_infer_framework.testing:main"
geo-infer-docs = "geo_infer_framework.documentation:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["geo_infer_*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.md", "*.txt"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["geo_infer_framework"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "numpy.*",
    "pandas.*",
    "geopandas.*",
    "h3.*",
    "folium.*",
    "plotly.*",
    "matplotlib.*",
    "scipy.*",
    "sklearn.*",
    "tensorflow.*",
    "torch.*",
    "pymc.*",
    "arviz.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "GEO-INFER-*/tests",
    "tests",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["GEO-INFER-*/src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 